import { noteTypes, noteLists } from "../src/pages/notes/stores/data"
import { studyTypes, studyProcesses as studyLists } from "../src/pages/study/stores/data"
import { demos } from "../src/pages/demos/stores/data"
import { writeFileSync } from "fs"
import { Plugin } from "vite"

type nestingDirectory = 'notes' | 'study'
type RouteRecordData = {
  path: string
  component: string
  redirect?: string
  children?: RouteRecordData[]
}

const types: Record<nestingDirectory, typeof noteTypes | typeof studyTypes> = {
  'notes': noteTypes,
  'study': studyTypes,
}
const lists: Record<nestingDirectory, typeof noteLists | typeof studyLists> = {
  'notes': noteLists,
  'study': studyLists,
}
const BASE = '../pages'

export const generateRoutes = (): RouteRecordData[] => {
  const result: RouteRecordData[] = []
  result.push({
    path: '/',
    component: `${BASE}/index.vue`,
  })
  result.push({
    path: '/:pathMatch(.*)*',
    component: `${BASE}/404.vue`,
  })
  const nestingDirs: nestingDirectory[] = ['notes', 'study']
  for (const route of nestingDirs) {
    result.push({
      path: `/${route}/`,
      redirect: types[route].at(0)!.link,
      component: `${BASE}/${route}/index.vue`,
      children: types[route].map(item => ({
        path: item.title.toLowerCase().replace(' ', '-'),
        component: `${BASE}${item.link}index.vue`,
      }))
    })
    result.push(
      ...lists[route].map((list, index) => list.map(item => ({
        path: `${types[route][index].link}${item.name}`,
        component: `${BASE}${types[route][index].link}${item.name}.md`,
      }))).flat()
    )
  }
  result.push({
    path: '/demos/',
    component: `${BASE}/demos/index.vue`,
  })
  result.push(
    ...demos.map(item => ({
      path: `/demos/${item.name}`,
      component: `${BASE}/demos/${item.name}.vue`,
    }))
  )
  return result
}

const indent = (d: number) => '  '.repeat(d)
const transformObject = (obj: RouteRecordData | RouteRecordData[] | String, deep: number = 1, key?: string): string => {
  if (typeof obj === 'string')
    return key === 'component'
      ? `() => import('${obj}')`
      : `'${obj}'`
  if (Array.isArray(obj))
    return `[\n${indent(deep)}${obj.map(item => transformObject(item, deep + 1)).join(',\n' + indent(deep))}\n${indent(deep - 1)}]`
  return `{\n${indent(deep)}${Object.entries(obj).map(([key, value]) => `${key}: ${transformObject(value, deep + 1, key)}`).join(',\n' + indent(deep))}\n${indent(deep - 1)}}`
}

const transformRoutes = (route: RouteRecordData[]): string => {
  let code = `/* eslint-disable */
// @ts-nocheck
// Generated by plugin/auto-router.ts

import type { RouteRecordRaw } from 'vue-router'

export const routes: RouteRecordRaw[] = ${transformObject(route)}
`
  return code
}

const autoRouterCallback = () => writeFileSync('src/plugins/router.ts', transformRoutes(generateRoutes()))

const autoRouter = (): Plugin => {
  return {
    name: 'auto-router',
    configureServer() {
      autoRouterCallback()
    },
    handleHotUpdate({ file }) {
      if (file.endsWith('src/plugins/router.ts'))
        return
      autoRouterCallback()
    }
  }
}
export default autoRouter