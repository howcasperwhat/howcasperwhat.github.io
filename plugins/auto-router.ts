import type { Plugin } from 'vite'
import { writeFileSync } from 'node:fs'
import { demos } from '../pages/demos/stores/data'
import { noteLists, noteTypes } from '../pages/notes/stores/data'
import { studyProcesses as studyLists, studyTypes } from '../pages/study/stores/data'

type nestingDirectory = 'notes' | 'study'
interface RouteRecordData {
  path: string
  component: string
  redirect?: string
  children?: RouteRecordData[]
}

const types: Record<nestingDirectory, typeof noteTypes | typeof studyTypes> = {
  notes: noteTypes,
  study: studyTypes,
}
const lists: Record<nestingDirectory, typeof noteLists | typeof studyLists> = {
  notes: noteLists,
  study: studyLists,
}
const BASE = '/pages'

export function generateRoutes(): RouteRecordData[] {
  const result: RouteRecordData[] = []
  result.push({
    path: '/',
    component: `${BASE}/index.vue`,
  })
  // TODO: add pattern matching for `[...name].[md|vue]` like filename.
  result.push({
    path: '/:404(.*)',
    component: `${BASE}/404.md`,
  })
  const nestingDirs: nestingDirectory[] = ['notes', 'study']
  for (const route of nestingDirs) {
    result.push({
      path: `/${route}/`,
      redirect: types[route].at(0)!.link,
      component: `${BASE}/${route}/index.vue`,
      children: types[route].map(item => ({
        path: item.title.toLowerCase().replace(' ', '-'),
        component: `${BASE}${item.link}index.vue`,
      })),
    })
    result.push(
      ...lists[route].map((list, index) => list.map(item => ({
        path: `${types[route][index].link}${item.name}`,
        component: `${BASE}${types[route][index].link}${item.name}.md`,
      }))).flat(),
    )
  }
  result.push({
    path: '/demos/',
    component: `${BASE}/demos/index.vue`,
  })
  result.push(
    ...demos.map(item => ({
      path: `/demos/${item.name}`,
      component: `${BASE}/demos/${item.name}.vue`,
    })),
  )
  return result
}

const indent = (d: number) => '  '.repeat(d)
function transformObject(obj: RouteRecordData | RouteRecordData[] | string, deep: number = 1, key?: string): string {
  if (typeof obj === 'string') {
    return key === 'component'
      ? `() => import('${obj}')`
      : `'${obj}'`
  }
  if (Array.isArray(obj))
    return `[\n${indent(deep)}${obj.map(item => transformObject(item, deep + 1)).join(`,\n${indent(deep)}`)}\n${indent(deep - 1)}]`
  return `{\n${indent(deep)}${Object.entries(obj).map(([key, value]) => `${key}: ${transformObject(value, deep + 1, key)}`).join(`,\n${indent(deep)}`)}\n${indent(deep - 1)}}`
}

function transformRoutes(route: RouteRecordData[]): string {
  const code = `/* eslint-disable */
// @ts-nocheck
// Generated by plugin/auto-router.ts

import type { RouteRecordRaw } from 'vue-router'

export const routes: RouteRecordRaw[] = ${transformObject(route)}
`
  return code
}

interface AutoRouterOptions {
  dir: string
}

function autoRouterCallback(options: AutoRouterOptions) {
  return writeFileSync(options.dir, transformRoutes(generateRoutes()))
}

function AutoRouter(options: AutoRouterOptions): Plugin {
  return {
    name: 'auto-router',
    configureServer() {
      autoRouterCallback(options)
    },
    handleHotUpdate({ file }) {
      if (file.endsWith(options.dir))
        return
      autoRouterCallback(options)
    },
  }
}
export default AutoRouter
